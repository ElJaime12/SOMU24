import * as tslib_1 from "tslib";
import { Directive, ElementRef, NgModule, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let ToastContainerDirective = class ToastContainerDirective {
    constructor(el) {
        this.el = el;
    }
    getContainerElement() {
        return this.el.nativeElement;
    }
}
ToastContainerDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: ToastContainerDirective, selectors: [["", "toastContainer", ""]], factory: function ToastContainerDirective_Factory(t) { return new (t || ToastContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, exportAs: ["toastContainer"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ToastContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[toastContainer]',
                exportAs: 'toastContainer'
            }]
    }], function () { return [{ type: ElementRef }]; }, { constructor: [], el: [], getContainerElement: [] });;
ToastContainerDirective.ctorParameters = () => [
    { type: ElementRef }
];
ToastContainerDirective = tslib_1.__decorate([
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], ToastContainerDirective);
export { ToastContainerDirective };
let ToastContainerModule = class ToastContainerModule {
}
ToastContainerModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: ToastContainerModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(ToastContainerModule, { declarations: [ToastContainerDirective], exports: [ToastContainerDirective] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ToastContainerModule, [{
        type: NgModule,
        args: [{
                declarations: [ToastContainerDirective],
                exports: [ToastContainerDirective]
            }]
    }], null, null);
ToastContainerModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function ToastContainerModule_Factory(t) { return new (t || ToastContainerModule)(); } });;
export { ToastContainerModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL1BhdHJpbW9uaW8gU09NVS9Eb2N1bWVudHMvUHJveWVjdG8gRklOQUwvbW9kdWxvLTgtZnJvbnQtbWFpbi1tYWluL25vZGVfbW9kdWxlcy9uZ3gtdG9hc3RyL2VzbTIwMTUvdG9hc3RyL3RvYXN0LmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs4R0FPQzs7Ozs4Q0FJNkMsQUFJdkM7Ozs7Ozs7Ozs7Ozs7OztrS0FLTixDQUFDLEFBTXVCIiwiZmlsZSI6InRvYXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE5nTW9kdWxlLCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xubGV0IFRvYXN0Q29udGFpbmVyRGlyZWN0aXZlID0gY2xhc3MgVG9hc3RDb250YWluZXJEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKGVsKSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICB9XG4gICAgZ2V0Q29udGFpbmVyRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICB9XG59O1xuVG9hc3RDb250YWluZXJEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cbl07XG5Ub2FzdENvbnRhaW5lckRpcmVjdGl2ZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgRGlyZWN0aXZlKHtcbiAgICAgICAgc2VsZWN0b3I6ICdbdG9hc3RDb250YWluZXJdJyxcbiAgICAgICAgZXhwb3J0QXM6ICd0b2FzdENvbnRhaW5lcicsXG4gICAgfSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0VsZW1lbnRSZWZdKVxuXSwgVG9hc3RDb250YWluZXJEaXJlY3RpdmUpO1xuZXhwb3J0IHsgVG9hc3RDb250YWluZXJEaXJlY3RpdmUgfTtcbmxldCBUb2FzdENvbnRhaW5lck1vZHVsZSA9IGNsYXNzIFRvYXN0Q29udGFpbmVyTW9kdWxlIHtcbn07XG5Ub2FzdENvbnRhaW5lck1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgTmdNb2R1bGUoe1xuICAgICAgICBkZWNsYXJhdGlvbnM6IFtUb2FzdENvbnRhaW5lckRpcmVjdGl2ZV0sXG4gICAgICAgIGV4cG9ydHM6IFtUb2FzdENvbnRhaW5lckRpcmVjdGl2ZV0sXG4gICAgfSlcbl0sIFRvYXN0Q29udGFpbmVyTW9kdWxlKTtcbmV4cG9ydCB7IFRvYXN0Q29udGFpbmVyTW9kdWxlIH07XG4iXX0=